@page "/edit"

@using Microsoft.EntityFrameworkCore
@using OnlineArtGallery.Domain
@using Microsoft.AspNetCore.Identity

@using OnlineArtGallery.Data
@using OnlineArtGallery.Components.Account

@inject UserManager<OnlineArtGalleryUser> UserManager
@inject SignInManager<OnlineArtGalleryUser> SignInManager
@inject IDbContextFactory<OnlineArtGallery.Data.OnlineArtGalleryContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Artwork</h2>
<hr />
@if (Artwork is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Artwork" OnValidSubmit="UpdateArtwork" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Artwork.Id" value="@Artwork.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Artwork.Name" class="form-control" />
                    <ValidationMessage For="() => Artwork.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Artwork.Description" class="form-control" />
                    <ValidationMessage For="() => Artwork.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Artwork.Price" class="form-control"/>
                    <ValidationMessage For="() => Artwork.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="image" class="form-label">Image:</label>
                    <InputText id="image" @bind-Value="Artwork.ImagePath" class="form-control" />
                    <ValidationMessage For="() => Artwork.ImagePath" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/" class="btn btn-primary btn-md">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Artwork? Artwork { get; set; }

    [SupplyParameterFromForm]
    private Profile Profile { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        try
        {
            Artwork = await context.Artwork.FirstOrDefaultAsync(m => m.Id == Id);
            Profile = await context.Profile.FirstOrDefaultAsync(p => p.Id == Artwork.ProfileId);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateArtwork()
    {
        using var context = DbFactory.CreateDbContext();

        if (Profile == null)
        {
            Profile = await context.Profile.FirstOrDefaultAsync(p => p.Id == Artwork.ProfileId);
        }

        if (Profile == null)
        {
            return;
        }

        Artwork.DateUpdated = DateTime.Now;
        Artwork.UpdatedBy = Profile.Name;
        context.Attach(Artwork!);
        context.Entry(Artwork).Property(a => a.Name).IsModified = true;
        context.Entry(Artwork).Property(a => a.Description).IsModified = true;
        context.Entry(Artwork).Property(a => a.Price).IsModified = true;
        context.Entry(Artwork).Property(a => a.ImagePath).IsModified = true;
        context.Entry(Artwork).Property(a => a.DateUpdated).IsModified = true;
        context.Entry(Artwork).Property(a => a.UpdatedBy).IsModified = true;
        context.Entry(Artwork).Property(a => a.CreatedBy).IsModified = false;
        context.Entry(Artwork).Property(a => a.DateCreated).IsModified = false;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ArtworkExists(Artwork!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/");
    }

    private bool ArtworkExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Artwork.Any(e => e.Id == id);
    }
}
