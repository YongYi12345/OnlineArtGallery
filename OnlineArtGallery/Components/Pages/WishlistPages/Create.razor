@page "/wishlist/create"
@using Microsoft.EntityFrameworkCore
@using OnlineArtGallery.Domain
@using OnlineArtGallery.Data
@inject IDbContextFactory<OnlineArtGallery.Data.OnlineArtGalleryContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<OnlineArtGalleryUser> UserManager
@inject SignInManager<OnlineArtGalleryUser> SignInManager
@using Microsoft.AspNetCore.Identity

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Wishlist</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Wishlist" OnValidSubmit="AddWishlist" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="artworkid" class="form-label">ArtworkId:</label> 
                <InputNumber id="artworkid" @bind-Value="Wishlist.ArtworkId" class="form-control" /> 
                <ValidationMessage For="() => Wishlist.ArtworkId" class="text-danger" /> 
            </div> 
            
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/wishlist">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Wishlist Wishlist { get; set; } = new();
    private OnlineArtGalleryUser user = default!;
    private string? username;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    protected override async Task OnInitializedAsync()
    {
        var claimsPrincipal = SignInManager.Context.User;
        if (claimsPrincipal != null)
        {
            user = await UserManager.GetUserAsync(claimsPrincipal);
            username = user?.UserName ?? "Unknown";
        }
        else
        {
            username = "Unknown";
        }
        await base.OnInitializedAsync();
    }
    private async Task AddWishlist()
    {
        using var context = DbFactory.CreateDbContext();
        Wishlist.DateUpdated = DateTime.Now;
        Wishlist.DateCreated = DateTime.Now;
        Wishlist.CreatedBy = username;
        Wishlist.UpdatedBy = username;
        context.Wishlist.Add(Wishlist);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/wishlist");

    }
}
