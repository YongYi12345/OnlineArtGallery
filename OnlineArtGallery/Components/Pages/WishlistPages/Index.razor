@page "/wishlist"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OnlineArtGallery.Domain
@using OnlineArtGallery.Data
@implements IAsyncDisposable
@inject IDbContextFactory<OnlineArtGallery.Data.OnlineArtGalleryContext> DbFactory
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity




@inject UserManager<OnlineArtGalleryUser> UserManager
@inject SignInManager<OnlineArtGalleryUser> SignInManager

<PageTitle>Index</PageTitle>

<div class="w3-padding w3-xlarge w3-pink">
    <h1>Wishlist</h1>
</div>


<p>
    <a href="wishlist/create">Add to Wishlist</a>
</p>

<QuickGrid Class="table" Items="filteredWishlist">
    <PropertyColumn Property="wishlist => wishlist.ArtworkId" />
    <TemplateColumn Context="wishlist" Title="Artwork">
        <img src="@GetArtworkPath(wishlist.ArtworkId)" id="image" height="150px" width="150px" />
    </TemplateColumn>

    <TemplateColumn Context="wishlist" Title="Artwork">
        @GetArtworkString(wishlist.ArtworkId)
    </TemplateColumn>
    <PropertyColumn Property="wishlist => wishlist.DateCreated" />
    <PropertyColumn Property="wishlist => wishlist.DateUpdated" />
    <PropertyColumn Property="wishlist => wishlist.CreatedBy" />
    <PropertyColumn Property="wishlist => wishlist.UpdatedBy" />

    <TemplateColumn Context="wishlist">
        <a href="@($"wishlist/edit?id={wishlist.Id}")">Edit</a> |
        <a href="@($"wishlist/details?id={wishlist.Id}")">Details</a> |
        <a href="@($"wishlist/delete?id={wishlist.Id}")">Delete</a>
    </TemplateColumn>

</QuickGrid>

@code {
    private OnlineArtGalleryContext context = default!;

    private Dictionary<int, Artwork> ArtworkDict = new Dictionary<int,Artwork >();

    private OnlineArtGalleryUser user = default!;
    private IQueryable<Wishlist> filteredWishlist = Enumerable.Empty<Wishlist>().AsQueryable(); // Initialize empt
    private string? username;
    

    private string GetArtworkString(int artworkId)
    {
        var artwork = context.Artwork.FirstOrDefault(v => v.Id == artworkId);
        return artwork == null ? string.Empty :$"{ArtworkDict[artworkId].Name}";
    }   
    private string GetArtworkPath(int artworkId)
    {
        var artwork = context.Artwork.FirstOrDefault(v => v.Id == artworkId);
        return artwork == null ? string.Empty :$"{ArtworkDict[artworkId].ImagePath}";

    }




    protected override async Task OnInitializedAsync()
    {
        var claimsPrincipal = SignInManager.Context.User;
        if (claimsPrincipal != null)
        {
            user = await UserManager.GetUserAsync(claimsPrincipal);
            username = user?.UserName ?? "Unknown";
        }
        else
        {
            username = "Unknown";
        }
        context = DbFactory.CreateDbContext();
        filteredWishlist = context.Wishlist.Where(w => w.CreatedBy == username);

        ArtworkDict = context.Artwork.ToDictionary(o => o.Id, o => o);


        await base.OnInitializedAsync();
    }


 
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
