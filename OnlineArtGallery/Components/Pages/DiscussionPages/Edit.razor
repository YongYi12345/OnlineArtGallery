@page "/discussion/edit"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@using OnlineArtGallery.Domain
@using OnlineArtGallery.Data
@using OnlineArtGallery.Components.Account

@inject UserManager<OnlineArtGalleryUser> UserManager
@inject SignInManager<OnlineArtGalleryUser> SignInManager

@inject IDbContextFactory<OnlineArtGallery.Data.OnlineArtGalleryContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit Topic</h1>

<h2>Discussion</h2>
<hr />
@if (Discussion is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Discussion" OnValidSubmit="UpdateDiscussion" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Discussion.Id" value="@Discussion.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Tite:</label>
                    <InputText id="title" @bind-Value="Discussion.Title" class="form-control" />
                    <ValidationMessage For="() => Discussion.Title" class="title-danger" />
                </div>                
                <div class="mb-3">
                    <label for="text" class="form-label">Text:</label>
                    <InputText id="text" @bind-Value="Discussion.Text" class="form-control" />
                    <ValidationMessage For="() => Discussion.Text" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/discussion">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Discussion? Discussion { get; set; }

    private OnlineArtGalleryUser user = default!;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Discussion ??= await context.Discussion.FirstOrDefaultAsync(m => m.Id == Id);

        if (Discussion is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        var claimsPrincipal = SignInManager.Context.User;
        if (claimsPrincipal != null)
        {
            // Use UserManager to get the OnlineArtGalleryUser object
            user = await UserManager.GetUserAsync(claimsPrincipal);
            username = user?.UserName ?? "Unknown"; //Fallback if the username is not found
        }
        else
        {
            username = "Unknown";
        }

    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDiscussion()
    {
        using var context = DbFactory.CreateDbContext();
        Discussion.DateUpdated = DateTime.Now;
        Discussion.UpdatedBy = username;
        context.Attach(Discussion!);
        context.Entry(Discussion).Property(a => a.Title).IsModified = true;
        context.Entry(Discussion).Property(a => a.Text).IsModified = true;
        context.Entry(Discussion).Property(a => a.DateUpdated).IsModified = true;
        context.Entry(Discussion).Property(a => a.UpdatedBy).IsModified = true;
        context.Entry(Discussion).Property(a => a.CreatedBy).IsModified = false;
        context.Entry(Discussion).Property(a => a.DateCreated).IsModified = false;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DiscussionExists(Discussion!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/discussion");
    }

    private bool DiscussionExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Discussion.Any(e => e.Id == id);
    }
}
