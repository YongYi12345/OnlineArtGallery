@page "/comments/create"
@using Microsoft.EntityFrameworkCore
@using OnlineArtGallery.Domain
@using Microsoft.AspNetCore.Identity
@using OnlineArtGallery.Data
@using OnlineArtGallery.Components.Account
@inject UserManager<OnlineArtGalleryUser> UserManager
@inject SignInManager<OnlineArtGalleryUser> SignInManager
@inject IDbContextFactory<OnlineArtGallery.Data.OnlineArtGalleryContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Add New Comment</h1>

<h2>Comment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Comment" OnValidSubmit="AddComment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>

            <div class="mb-3">
                <label for="text" class="form-label">Text:</label> 
                <InputText id="text" @bind-Value="Comment.Text" class="form-control" /> 
                <ValidationMessage For="() => Comment.Text" class="text-danger" /> 
            </div>              
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="@($"/discussion")">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int DiscussionId { get; set; } = new();
    [SupplyParameterFromForm]
    private Comment Comment { get; set; } = new();

    private OnlineArtGalleryUser user = default!;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        var claimsPrincipal = SignInManager.Context.User;
        if (claimsPrincipal != null)
        {
            // Use UserManager to get the OnlineArtGalleryUser object
            user = await UserManager.GetUserAsync(claimsPrincipal);
            username = user?.UserName ?? "Unknown"; //Fallback if the username is not found
        }
        else
        {
            username = "Unknown";
        }
    }
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddComment()
    {
        using var context = DbFactory.CreateDbContext();
        Comment.DateUpdated = DateTime.Now;
        Comment.DateCreated = DateTime.Now;
        Comment.CreatedBy = username;
        Comment.UpdatedBy = username;
        Comment.DiscussionId = DiscussionId;
        context.Comment.Add(Comment);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/comments?discussionid="+Comment.DiscussionId);
    }
}
